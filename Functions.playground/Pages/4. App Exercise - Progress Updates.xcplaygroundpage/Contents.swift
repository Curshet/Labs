/*:
 ## Упражнение для приложения — информирование об успехах
 
 >Эти упражнения закрепляют понимание Swift в контексте фитнес-приложения.
 
 Довольно часто вам нужно передавать в функцию вводную информацию.  К примеру, функция информирования об успехах, которую вы написали в упражнении «Работающее приложение», может быть расположена в такой области вашего проекта, что она не будет иметь доступа к значениям `steps` и `goal`.  В этом случае при вызове функции вам нужно сообщить ей количество шагов, которое было пройдено, и цель на день, чтобы она могла вывести релевантные сообщения об успехах.
 
 Перепишите функцию `progressUpdate` таким образом, чтобы она принимала два параметра типа `Int`, называющиеся `steps` и `goal`.  Как и ранее, функция должна вывести «Хорошее начало!» в случае, если `steps` меньше 10% от `goal`, «Вы на пути к половине цели!», если `steps` меньше, чем половина `goal`, «Вы уже выполнили больше половины своей цели!», если `steps` меньше, чем 90% от `goal`, «Вы почти достигли цели!», если `steps` меньше `goal`, и «Вы выполнили вашу цель!» в противном случае.  Вызовите функцию и зафиксируйте результат.
 
 Вызовите функцию несколько раз, передавая ей различные значения `steps` и `goal`.  Зафиксируйте результаты и убедитесь, что она выдаёт то, что вы ожидаете, для каждой из пары параметров, переданных в функцию.
 */
func progressUpdate(steps: Int, goal: Int) {
    
    let compare = true
    
    switch compare {
    
    case Double(steps) < Double(goal) * 0.1:
        print("Хорошее начало!")
    case Double(steps) < Double(goal) * 0.5:
        print("Вы на пути к половине цели!")
    case Double(steps) < Double(goal) * 0.9:
        print("Вы уже выполнили больше половины своей цели!")
    case steps < goal:
        print("Вы почти достигли цели!")
    default:
        print("Вы выполнили вашу цель!")
    
    }

}

progressUpdate(steps: 900, goal: 10000)
progressUpdate(steps: 1900, goal: 10000)
progressUpdate(steps: 5000, goal: 10000)
progressUpdate(steps: 9000, goal: 10000)
progressUpdate(steps: 10900, goal: 10000)
/*:
 Ваше фитнесс-приложение поможет бегунам не выбиться из графика для достижения их целей.   Напишите функцию `pacing`, принимающую четыре параметра типа `Double`, называющиеся `currentDistance` (текущее расстояние), `totalDistance` (общее расстояние), `currentTime` (текущее время) и `goalTime` (целевое время).  Функция должна вычислить, не выбивается ли бегун из графика, чтобы достичь или побить цель `goalTime`.  Если не выбивается, напечатайте «Держите темп!», в противном случае напечатайте «Вам нужно ускорить темп, чтобы успеть!»
 */
func pacing(currentDistance: Double, totalDistance: Double, currentTime: Double, goalTime: Double) {

    let compare = true
    
    switch compare {
    
    case _ where currentDistance < totalDistance && currentTime <= goalTime:
        print("Держите темп!")
    case _ where currentDistance < totalDistance && currentTime > goalTime:
        print("Вам нужно ускорить темп, чтобы успеть!")
    case _ where currentDistance >= totalDistance:
        print("Вы успешно финишировали!")
    default:
        break
    
    }

}

pacing(currentDistance: 30, totalDistance: 30, currentTime: 40, goalTime: 30)
//: [Ранее](@previous)  |  страница 4 из 6  |  [Далее: Упражнение — Возвращение результатов](@next)
