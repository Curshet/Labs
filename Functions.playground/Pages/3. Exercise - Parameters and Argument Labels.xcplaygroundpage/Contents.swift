/*:
 ## Упражнение — Параметры и метки аргументов
 
 Напишите новую функцию `introduction`.  Она должна получать два строковых параметра типа `String`, под метками `name` (имя) и `home` (родной город), и один целочисленный параметр типа `Int`, `age` (возраст).  Функция должна вывести короткую информацию.  Например, если функции передать "Настя" "Суиндон, графство Уилтшир" и 17, она может напечатать «Настя, 17 лет, место рождения: Суиндон, графство Уилтшир».  Вызовите функцию несколько раз и зафиксируйте результаты.
 */
func introduction(name: String, home: String, age: Int) {
    print("Имя: \(name)\nМесто рождения: \(home)\nВозраст: \(age)")
}

introduction(name: "Настя", home: "Суиндон, графство Уилтшир", age: 17)
introduction(name: "Олег", home: "Саранск", age: 15)
introduction(name: "Василий", home: "Москва", age: 20)
/*:
 Напишите функцию `almostAddition`, которая принимает два аргумента `Int`.  Первый аргумент не должен требовать метки.  Функция должна сложить оба аргумента, вычесть 2, затем вывести результат.  Вызовите функцию с разными параметрами и зафиксируйте результаты.
 */
func almostAddition(_ first: Int, second: Int) -> Int {
    
    let result = first + second - 2
    print("Полученный результат вычисления: \(summ)")
    
    return result
    
}

almostAddition(100, second: 100)
almostAddition(3566, second: 57848)
/*:
 Напишите функцию `multiply`, принимающую два аргумента `Double`.  Функция должна перемножить два аргумента и напечатать результат.  Первый аргумент не должен требовать метки, а второй аргумент должен иметь внешнюю метку, «by», которая будет отличаться от внутреннего названия переменной.  Вызовите функцию и зафиксируйте результаты её работы.
 */
func multiply(_ first: Double, by second: Double) -> Double {

    let result = first * second
    print("Полученный результат умножения: \(result)")
    
    return result
    
}

multiply(0.534, by: 0.8674)
multiply(0.6746, by: 0.985)
//: [Ранее](@previous)  |  страница 3 из 6  |  [Далее: Упражнение для приложения — информирование об успехах](@next)
